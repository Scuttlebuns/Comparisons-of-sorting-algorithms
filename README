    _    _                  _ _   _
   / \  | | __ _  ___  _ __(_) |_| |__  _ __ ___  ___
  / _ \ | |/ _` |/ _ \| '__| | __| '_ \| '_ ` _ \/ __|
 / ___ \| | (_| | (_) | |  | | |_| | | | | | | | \__ \
/_/   \_\_|\__, |\___/|_|  |_|\__|_| |_|_| |_| |_|___/
           |___/

##CS 115 Project - Comparison of Sorting Algorithms

##Instructor: Dr. Pirouz

## Team Members
- Anthony Sayre (Main program development, test execution)
- Tevin Heins (Data generation, experimental setup, graph generation)
- Memo Prado (Part 2 of project, video editing, )
- Sarah Garner (Mathematical analysis, report writing lead, theoretical analysis)

## Project Overview
This project is a comprehensive analysis of sorting algorithms, comparing theoretical predictions with actual performance. We are studying Insertion, Selection, Bubble, Merge, Quick, Heap, Counting, and Radix Sort algorithms, focusing on integers in the range [0, n-1].

##Studied Algorithms
Insertion Sort
Selection Sort
Bubble Sort
Merge Sort
Quick Sort
Heap Sort
Counting Sort
Radix Sort

## Installation using Github:
To set up the environment for running sorting algorithm comparisons:

1) Clone the repository
git clone https://github.com/Scuttlebuns/115_Project.git

2) Navigate to the project directory
cd 115_Project

3) Compile the project using 'make'

4) Run './a.out'

##Installation using Canvas:
1) Project hiearchy looks like this: 
          115_Project/
            |
            |-> README
            |-> Makefile
            |-> main.cc
            |-> dataset.h
            |-> timing.h
            |-> inputfiles/
            |     |
            |     |-> generator.cc
            |     |-> input500.txt
            |     |-> input50k.txt
            |     |-> input500k.txt
            |
            |-> algorithms/       
                  |-> bubble.h
                  |-> counting.h
                  |-> heap.h
                  |-> insertion.h
                  |-> merge.h
                  |-> quick.h
                  |-> radix.h
                  |-> selection.h

2) A. Make the 115_Project/ directory 
   B. Inside of the 115_Project/ copy "README", "main.cc" 
  ", "dataset.h", "timing.h", make a directory called "inputfiles" and a direcotry called algorithms
   C. Inside of inputfiles, copy "generator.cc", "input500.txt", "input50k.txt" and "input500k.txt" to the directory
   D. Inside of the algorithms directory copy "bubble.h", "counting.h", "heap.h", "insertion.h", "merge.h", "quick.h", "radix.h", "selection.h"

## Usage
To run the sorting algorithm comparison:
0. Follow the prompts in the program for instructions 
1. After running Enter '1', '2', '3' for input file size
2. Enter the number of times to run the program on each input file, it will return the average of those runs
3. Wait for the program to run, depending on the inputsize and computer hardware timing can vary 

## Reports and Analysis
The project includes a detailed report addressing theoretical questions, data generation, experimental setup, and analysis. 

## Code Structure and Style
- Main program with separate header files for each algorithm.
- Use of 'using namespace std' instead of 'std::' as well as vectors adherence to clear code styling guidelines for readability.
- Inclusion of a detailed instruction manual on how to generate input data and interpret output results.

## Sample output on input 500.txt and 1 run

Which input file would you like to use?
Input '1' for 500
Input '2' for 50k
Input '3' for 500k
1
Input numer of times to run program
1

Average timing results in Microseconds
Size: 500 || Runs: 1
============================
Type: Sorted
Insertion: 22
Selection: 3666
Bubble: 3710
Merge: 603
Quick: 131
Heap: 437
Counting: 111
Radix: 268
============================
Type: Random
Insertion: 2627
Selection: 3727
Bubble: 7754
Merge: 674
Quick: 137
Heap: 432
Counting: 117
Radix: 265
============================
Type: Reversed
Insertion: 4972
Selection: 3695
Bubble: 10044
Merge: 606
Quick: 132
Heap: 386
Counting: 109
Radix: 273


