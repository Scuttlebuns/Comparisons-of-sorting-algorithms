CS 115 Project 
Anthony Sayre
Tevin Heins
Memo Prado
Sarah Garner

Weekly Check ins on discord after csci 115 lecture, Thursdays @ 11ish


Who's doing what?
Anthony: Working on the main program (Lead CTO), running code and test case,
using my computer to run program

Tevin: Helping with main code, Data Generation and experimental setup, graph
generation based on data

Memo: Making separate program to generate input vectors for main(),helping w/
theoritical, will edit video, will help merge into main branch

Sarah: The math lol, Leading report and writing portion of project, help on video

NOTE: If there is any part of the project anyone doesn't feel comfortable on,
just let us know in discord :)

Also: Feel free to colaborate, we will be in discord more than often.




=============================================================================================================
Implementation:
1. Main program with separate headers file (each header contains the
alogrithm)
2. Main will contain code to read in a file (outlined below)

Code Styling:
1. Use Vectors, no arrays, use NAMESPACE STD;
2. parentisis and [], perferredspace between statement and condition:  if (input = 0);
3. main(){
   }

To ADD:
1. Impliment average time per 3 runs
2. Impliment the vector initilization into the main program
3. Produce 3 files of input (memo is handling this)
4. Figure out who is running the program (likely Anthony)

=============================================================================================================

Sample Run:

Input Size: 100

SORTED LIST, in milliseconds:
Insertion:		0.40
Selection:		0.10
Bubble:			0.40
Merge sort:		0.40
Quicksort:		0.30
Heapsort:		0.30
Counting Sort:	0.29
Radix Sort:		0.29


HALFSORTED, in milliseconds:
Insertion:		0.40
Selection:		0.10
Bubble:			0.40
Merge sort:		0.40
Quicksort:		0.30
Heapsort:		0.30
Counting Sort:	0.29
Radix Sort:		0.29

REVERSED, in milliseconds:
Insertion:		0.40
Selection:		0.10
Bubble:			0.40
Merge sort:		0.40
Quicksort:		0.30
Heapsort:		0.30
Counting Sort:	0.29
Radix Sort:		0.29

===================================================================================

Input File:
1.Size of file is the top line, prompt the user to enter the size 'n'
2.output file guidelines as below
	1st line: size 
	2nd line: 'sorted'
	3rd line: data, separated by single space, ensure no extra space at
	the end

	4th line: 'halfsofted'
	5th line: data, separated by single space, ensure no space at end
	of vector

	6th line: 'reversed'
	7th line: data, seprated by single space, ensure no space at end


Sample Input file:
10
sorted
0 2 3 4 5 6 7 8 9 10
halfsorted
1 2 3 4 5 9 8 7 6 5
reversed
10 9 8 7 6 5 4 3 2 1

